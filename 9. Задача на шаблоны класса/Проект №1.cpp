/*
	Практика программирования. ТК.
	Решение: Задача на шаблоны класса
	Автор: Туров Виталий Александрович
	Группа: 514
*/
/*
	Проект №1.
	На основе реализации класса двусвязанного списка, описанного в лекции, реализовать
	шаблон класса стека (в отличие от списка, добавлять и удалять значения можно только с одного конца).
	В классе реализовать конструктор, деструктор, функции добавления и удаления значения из стека.
	Перегрузить операцию вывода объекта стека в поток. Максимальное количество значений в стеке ограничено
	и задаётся параметром конструктора. Функции добавления и удаления значений дожны выдавать сообщения об ошибке при переполнении стека
	или при попытке чтения из пустого стека.
	В main создать два стека для целых и плавающих чисел. В цикле добавить в стеки по 5-6 значений. Выводить на экран состояние стека
	на каждом шаге цикла. Повторить те же операции с удалением значений из стеков.
*/

#ifdef UNICODE
#undef UNICODE
#endif

#include <locale.h>
#include <iostream>
#include <ctime>
#include <cstdlib>

// Библиотека наших классов
#include "Stek.h"

using namespace std;

// Точка входа

int main(void)
{
	setlocale(LC_ALL, "ru"); // Установка кодировки windows-1251
	
	// Зерно рандома
	srand(time(NULL));

	// Объявление стека
	Stek<int> stek1(5);

	Stek<double> stek2(5);

	// Заполнение стека случайным образом
	for (int i = 0; i < 6; i++)
	{
		// Заполнение случайными числами
		stek1.push(rand() % (1000 - 500 + 1) - 500);

		// Вывод
		if (i < 5)
			cout << stek1;
	}

	// Заполнение стека случайным образом
	for (int i = 0; i < 6; i++)
	{
		// Заполнение случайными числами
		stek2.push((double)(rand() % (9000 - 0 + 1) - 0) + 0.1);
		
		// Вывод
		if (i < 5)
			cout << stek2;
	}

	// Красота
	cout << endl << endl
		<< "Вынимание элементов из стека: " << endl << endl;

	// Вынимание элементов из стека
	for (int i = 0; i < 6; i++)
	{
		// Вынимание из стека
		stek1.pop();
		if (i < 5)
			cout << stek1;
	}

	for (int i = 0; i < 6; i++)
	{
		// Вынимание из стека
		stek2.pop();
		if (i < 5)
			cout << stek2;
	}
	system("pause >> void");
	return 0;
}